import { Appear, CodePane, Heading, Image, Slide, Text } from "spectacle";
import React from "react";

import hook from "../../images/hook.png";
import styled1 from "../../images/styled_1.png";
import styled2 from "../../images/styled_2.png";
import props1 from "../../images/props1.png";
import props2 from "../../images/props2.png";
import jsx from "../../images/jsx.png";

export const react = [
  <Slide>
    <Heading>Typing React</Heading>
  </Slide>,
  <Slide>
    <Heading>Hooks</Heading>
    <Text>With auto inference</Text>
    <Image src={hook} />

    <Appear>
      <div>
        <Text>With explicit types</Text>
        <CodePane
          lang={"javascript"}
          source={`const data = useMyHook<ReturnedType>();`}
        />
      </div>
    </Appear>
  </Slide>,
  <Slide>
    <Heading>Redux actions</Heading>

    <CodePane
      lang={"javascript"}
      source={`export const setLanguage = createAction<string>('SET_LANGUAGE');

dispatch(localesActions.setLanguage(lang));
`}
    />
  </Slide>,
  <Slide>
    <Heading>Selectors</Heading>

    <CodePane
      lang={"javascript"}
      source={`export const selectLocalesLanguage = createSelector<GlobalState, LocalesState, string>(
  selectLocalesDomain,
  locales => locales.language
);`}
    />
  </Slide>,
  <Slide>
    <Heading>Reducers</Heading>

    <CodePane
      lang={"javascript"}
      source={`export type LocalesState = {
  language: string;
};

export const INITIAL_STATE: LocalesState = {
  language: null,
};

const handleSetLanguage = (state: LocalesState, { payload }: ReduxAction<string>) => {
  state.language = payload;
};

const HANDLERS = {
  [localesActions.setLanguage.toString()]: handleSetLanguage,
};`}
    />
  </Slide>,
  <Slide>
    <Heading>Global state type</Heading>

    <Text>(Autogenerated by plop)</Text>
    <CodePane
      lang={"javascript"}
      source={`export type GlobalState = {
  locales: LocalesState;
  startup: StartupState;
  users: UsersState;
};`}
    />
  </Slide>,
  <Slide>
    <Heading>StyledComponents & Theme</Heading>

    <Text>Enum constants</Text>
    <CodePane
      lang={"javascript"}
      source={`export enum Color {
  WHITE,
  BLACK,
  BORDER,
  DISABLED,
  PRIMARY,
  SECONDARY,
  ERROR,
}`}
    />
  </Slide>,
  <Slide>
    <Heading>StyledComponents & Theme</Heading>

    <Text>Typed theme</Text>
    <CodePane
      lang={"javascript"}
      source={`export interface DefaultTheme {
    colors?: ThemeMap<Color, string>;
    ...
  }`}
    />

    <Text>Accessible in styled components</Text>

    <Image src={styled1} />
  </Slide>,
  <Slide>
    <Heading>StyledComponents & Theme</Heading>

    <Text>Styled components also support native props types</Text>

    <Image src={styled2} />
  </Slide>,
  <Slide>
    <Heading>Props</Heading>

    <Text>No propTypes!</Text>
    <Text>Typescript typings instead</Text>
    <Image width={"100%"} src={props1} />
  </Slide>,
  <Slide>
    <Heading>Props</Heading>
    <Heading fontSize="h2">Using native props</Heading>

    <Image width={"100%"} src={props2} />
  </Slide>,
  <Slide>
    <Heading>Props</Heading>
    <Heading fontSize="h2">Validated inside JSX</Heading>

    <Image width={"100%"} src={jsx} />
  </Slide>
];
